CPP Files and Executables
**************************

g++ -(Flags) SourceCode.cpp -o executableFileName

Flags,			Description

--help			Show options for the compiler
-Wall 			Show all warnings
-g 			Provides debugging feature
--std=c++17		Compiles to a specific version of C++, in this case C++17
-o fileName		Compiles and links files into an executable called fileName
			Default fileName is called a.out
-c			Compiles and assenmbes files but does not link them
--sys-root=directory	Uses directory as root directory for heasers and libraries
-Werror			Make all warnings into errors
-Wextra			Allows extra warnings not used by -wall
-Wfatal-errors		Similar to wall but treats errors as fatal and stops compilation
-fmax-errors=numErrors	Tells compiler to halt after reaching the amount in numErrors
-pedantic		Allows warnings that follow the rules of ISO C++
-Wshadow		warns whenever a local variable or type declaration shadows another
			variable, parameter, class member, etc
-Wconversion		Warns if making unsafe conversions between signed and unsigned types
-O2			optimize code and check for errors
-time			Times the execution of each subprocess

---

clang++ fileName.cpp

Compiles a cource file using the clang++ compiler.

---

./executableName

Runs the executable from linux terminal

---

main.cpp
========

#include "header.hpp"

int main()
{
	functionOne();
	functionTwo();

	return 0;
}

header.hpp
==========

#ifdef HEADER_HPP
#define HEADER_HPP
#include <libraryName>

dataType functionOne();		// Prototype
dataType functionTwo();		// Prototype

// Code entire class definitions here

#endif


implementation.cpp
==================

#include <libraryName>
#include "header.hpp"

dataType functionOne();
{
	// Execute code here
	return value;
}

dataType functionTwo();
{
	// Execute code here
	return value;
}


Libraries
**********

#include <cstdlib>
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <limits>
#include <numeric>
#include <ctime>
#include <fstream>
#include <>
#include <>
#include <>

using namespace std;	// Automatically uses 'std::' in the code


Variables, console IO, loops, and conditionals
***********************************************

Var++	// Use variable first, then increment

++Var	// Increment first, then use the variable

---

std::cout << varName << std::endl;

outputs varName and a newline to console

---

std::cin >> varName;

User input in console is stored in varName.

---

for (int i = 0; i < number; i++)
{
	// Execute this code
}

Does not make a difference if 'i++' or '++i' is used in the argument.

---

for (auto indexName: vectorName)
{
	// Code executes here for each index using indexName
}

// Works for arrays too.

---

// Variables can also go here

int main() 
{
	// main code and variables are here

	return 0;
}


---

dataType,			Description

short int			-32768 to 32767
int				-2147483648 to 2147483647
long				-9223372036854775808 to 9223372036854775807
unsigned int
unsigned short int		0 to 65535
unsigned long int		
float				1.17549e-38 to 3.40282e+38
double
long double			3.3621e-4932 to 1.18973e+4932
bool				0 if false, 1 if true
char				Ascii character
const (dataType)		Creates an unchangable value
auto				Compiler infers the variableType

static (dataType)		Only one copy of this data is shared among
				all objects of its' class. It is initialized
				in the start of the program and is only visible
				within its' own class.

---

sizeOf(varName)

Returns the size of varName in bytes. Can even be used for arrays.

---

printf("%c %d %.3f %s\n", 'charVar', intVar, floatVar, "String")'

Symbols on the left are substituted by the variables on the right

Symbol,		Description

%%		Outputs a percent sign 

---

getline(std::cin, varName);

User input in console is stored in variableName

---

if()
{
	// Execute Code
}
else if()
{
	// Execute Code
}
else
{
	// Execute Code
}

---

this->functionName(argOne, argTwo, ...)

Uses functionName in the class that 'this->' is used in.
All objects share the same function definition in the code segment.


Strings
********

std::string stringName;

std::string stringName = "Hello";

Creates a string variable named stringName.

---

std::stod(doubleVar);

converts string to double.

---

stringNameOne = stringNameTwo;		// Assignment operator

stringNameThree = stringNameTwo + stringNameOne;	// Concatination

Other overloaded operators: []  +=  ==  <  <=  >  >=  !=  <<  >>


Other functions:  

stringName.capacity();		// Returns size of allocated storage.

stringName.substr(indexOne, indexTwo);	// Returns the sub-string from indexOne to indexTwo.

stringName.find(int, subStr);	// Returns the index of the sub-string found in stringName

stringName[index];		// Returns the char in the index of the string.

stringName.insert(index, str);	// Inserts string in index of stringName.

stringName.size();		// Returns the length of stringName.

stringName.length();		// Returns the length of stringName.
				// Length and size do the same thing
				// for strings.


Arrays and Vectors
*******************

dataType arrayName[numOfElements] = {firstValue, secondValue, thirdValue, ...};

Creates an array and initializes values. if the numberOfPlaces is greater than the number of values initialized, then the rest of the values will be initialized to zeros.

---

dataType arrayName[numOfElements] = {};

Initializes all elements to zero.

---

dataType arrayName[numOfRows][numOfColumns][numOfDepth] = {{{r0c0d0, r0c1d0, ...}, {r1c0d0, r1c0d0 ...}}, {{r0c0d1, r0c1d1, ...}, {r1c0d1, r1c0d1 ...}}}

Creates and initializes a three dimensional array.

---

arrayName[rowIndex][columnIndex][depthIndex] = value;

assigns a value to a specified place in an array.

---

sizeof(arrayName);

Returns the size of the entire array in bytes.

sizeof(*arrayName);

Returns the size of the data in the first index of the array in bytes.

---

std::vector<dataType> vectorName(numofElements);

Creates a vector.

---

vectorName[elementIndex] = value;

assigns a value to a specified place in the vector.

---

vectorName.push_back(value);

extends the tail end of the vector to append the value.

---

vectorName.size()

Returns the size of the vector.

---

std::iota(std::begin(vectorName), std::end(vectorName), startingValue);

Fills in a previously created vector with values that increment from beginning to the end.

---

Pointers and References
************************

dataType* addressName = &variableName;

dataType* addressName = NULL;

dataType* addressName = 0;

dataType* addressName;

dataType *addressName;


Stores the address of variableName as a value in addressName.

More specifically, it allocates a number of bytes to contain the
value of variableName and stores the address of the first byte 
in addressName.

Initializing to NULL is the same as initializing to 0.

---

&varName;

Returns the address of varName. 
The '&' is the reference operator, returning the address.

---

*addressName

Returns the value stored in the address identified by addressName. 
The '*' is the de-reference operator, returning the value from an address.

---

In other words: 

'&' means "return the address" and '*' means "return the value".

---

int **addressName;

Creates a pointer to another pointer to a variable.
Can create longer series of pointers by adding more '*' operators.

---

**addressName

Returns the value of a variable pointed by a series of two pointers.
Can return longer series of pointers by adding more '*' operators.

---

Arguments for functions or constructors can be an address or a value.

A call by address will allow changes to be made outside the function.
An address to the value is passed into the armument.

A call by value will only make changes inside the scope of the function.
A copy of the value is passed into the argument.



Exceptions
***********

try{

	if(condition)
	{
		throw "Error Message";
	}
	else
	{
		// Execute code
	}	
}
  
catch(ExceptionType)
{
	std::cout << "Error message in console"
	// Program Halts
}


File IO
********

cout is a standard output stream object of type ostream.
cin is the standard input stream object of type istream.

---

ofstream outStreamName;	// Creates a file output stream
ifstream inStreamName;	// Creates a file input stream

---

streamName.open("fileName");		// Opens fileName and assumes fileName exists
streamName.open("filename", ios::app);	// Opens fileName and appends to the existing file
streamName.close();			// Closes fileName
streamName.is_open();			// Returns true if file is open

---

inStreamName >> varName;	// Reads varName from file
outStreamName << varName;	// Writes varName to file

---

streamName.peek()	// Returns the next char

streamName.eof()	// Returns true if at end of file

---

Classes and Objects
********************

class className
{

friend returnType functionName(dataType parameterOne, dataType parameterTwo, ...);
friend returnType functionName();	// Friend functions can access private 
					// members of this class from the outside

dataAccessModifier:
	
	dataType varNameOne;
	dataType varNameTwo;
	dataType varNameThree;

functionAccessModifier:

	className::className(dataType parameterOne, dataType parameterTwo, ...)
		{
			// Execute constructor code here
		}

	className::className()
		{
			// Execute constructor code here
		}

	className::~className()
		{
			// Execute de-constructor code here
			// All remaining memory should be released here
		}


	returnType functionName(dataType parameterOne, dataType parameterTwo, ...)
		{

		// Block of statements that execute if function is called..
	
		return variableName;

		}

	const returnType functionName( ...) const
		{

		// Block of statements that execute if function is called..
	
		return variableName;

		}

		// Constant functions are read only for data members
		// while non-constant functions are read/write.
};


---

className::funcName(argOne, argTwo, ...)	// Creates a static member function
{
	// Execute function code here...
}

// A single copy of static member functions are created and are used for every
// object in the entire class. Static member functions can only access 
// static data members or other static functions.

---

Access modifiers can be public, private, or protected.
An access modifier by default is private.

Access modifier,		Description

Public  			Allow access by all outside classes and functions.

Private		 		Allow access only by members within the same class.

Protected 			Allow access only by members within the same class,
				any child classes, and any declared friend classes.

---

Operator overloading is implemented in a classes. This allows using arithmetic, 
comparision, and IOStream operators between objects of the same class.		

In this example, the '==' operator was used, but any comparision operator can be
used such as  !=  <  >  <=  >=

bool operator ==(const className& objectNameOne, const className& objectNameTwo)
{
	// Operator code here

	return booleanValue;
}

---

className objectName;

Instantiates an object with a no argument constructor.

---

className objectName(argumentOne, argumentTwo, ...);

Instantiates an object with a constructor that takes in arguments.

---

In this example, the '+' operator was used, but any arithmetic operator can be 
used such as  -  *  /  %  and auxiliary assignment operators such as  +=  -= 
and the assignment operator  =

Compilers automatically overload the assignment operator for a class.


className operator +(const className& objectNameOne, const className& objectNameTwo)
{
	// Operator code here

	return objectNameSum;
}

Both the << and >> operators can be used.

std::ostream& operator <<(std::ostream& out, const className& objectName)
{
	out << objectName.getValue();

	return out;
}

std::istream& operator >>(std::istream& in, const className& objectName)
{
	in >> objectName.value;

	return in;
}

---

void functionName(dataType* parameterName, ...) // Pass by Pointer
		{

		// Passes the address of parameterName.
		// Changes to parameterName are permanent.

		}
functionName(&argName);	// Call by pointer
			// A NULL value can be used in argName to mean 'nothing'.



void functionName(dataType& parameterName, ...) // Pass by Reference
		{

		// Passes the value of parameterName using the address.
		// Changes to parameterName are permanent.

		}
functionName(argName);	// Call by reference



Templates
**********

template <typename nameOne, typename nameTwo, ... >

nameOne functionName(nameOne x, nameTwo y, ...)
{
	// Function code here...

	return nameOne;
}



----------


// To call a template implemented function

functionName<dataTypeOne, DataTypeTwo, ...>(varOne, varTwo, ...)


---------

// Example

template <typename x, typename y>
x add(T x, T y)
{
	return (x + y);
}

int main()
{
	int newVariable = add<int, double>(3, 4.2);
}


Output Formatting
******************

#include <iostream>
#include <iomanip>

---

cout << setprecision(3) << 12.34;
// Output: 12.3

// Sets the max number of digits to be displayed.
// Does not show zeros after the decimal point by default.
// Precision for floating point number is set to six by default.

---

cout << fixed << 12.34;		
// Output: 12.340000

// Set precision to mean the digits after the decimal point.
// Cannot be set to 'scientific' at the same time.

---

cout << scientific << 12.34;
// Output: 1.234000e+01

---

cout << fixed << setprecision(1) << 12.34;	
// Output: 12.3	

// Sets the max number of digits after the decimal point.

---

cout << scientific << setprecision(1) << 12.34;
// Output: 1.2e+01

// Sets the max number of digits after the decimal point.
// Cannot be set to 'fixed' at the same time.

---

cout << setprecision(3) << showpoint << 99.0;
// Output: 12.0

// Allows zeros to be displayed after the decimal point.
// Using 'noshowpoint' will not display zeros after the decimal point.

------

cout << setw(4) << "Hi" << endl;
// Output: "  Hi"

// Sets the size of the string to be outputted.
// Right aligned by default.
// Space char used for fill as default.

---

cout << setfill('$') << setw(4) << "Hi" << endl;
// Output: "$$Hi"

// Changes the char that will be used as filler.

---

cout << left << setw(4) << "Hi" << endl;
// Output: "Hi  "

// Changes to left alignment.
// Using 'right' will instead change to right alignment.

---

// When cout or cin is being written to, the data is 
// temporarily stored in a block of data called a buffer.

// 'Flushing the buffer' is the action of sending the data temporarilty 
// stored in the buffer to memory such as the console, file, variables, etc.

cout << endl;
// Outputs newline, and flushes the buffer.

cout << flush;
// Flushes the buffer.




Linear Data Structures
***********************

Stacks, Recursion, Queues, Collection ADT, List ADT (Linked lists, Doubly Linked Lists, Circularly Linked Lists), Skip List, MAP ADT, Hash Tables, Hash Tables with Utilize Linked Lists, Sorting (Quicksort, Shell Sort, Insertion Short, Bubble Sort), and Searching







