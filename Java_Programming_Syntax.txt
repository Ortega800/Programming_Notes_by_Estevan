Arrays in Java
***************


dataType[] arrayName = new dataType[numElements];

Creates a static array.

--

arrayName[index] = variable;

Assigns an element in a previously created array.

--

dataType[] arrayName = {var1, var2, var3, ...};

Creates a static array and initializes values.

--

arrayName.length

Returns the length of a one dimensional array. 

Returns the number of rows (length of column) of a two dimensional array.

--

dataType[][] arrayName = new dataType[numRowElements][numColumnElements];

Creates a two-dimensional static array.

--

arrayName[rowIndex][columnIndex] = variable;

Assigns an element in a previously created two-dimensional array.

--

dataType[][] arrayName = {{r0c0, r0c1, r0c2, ...}, {r1c0, r1c1, r1c2, ...}};

Creates a static two-dimensional array and initializes values.

--

arrayName[rowIndex].length

Returns the length of the row in a two-dimensional array.

--

arrayName[rowIndex][columnIndex].length

Returns the length of the depth in a three-dimensional array.

--

dataType[][]...[] arrayName = new dataType[dimOneElements][dimTwoElements]...[dimFinalElements];

Creates an arbitraraly sized multi-dimensional array.

--

for(dataType elementName : arrayName) {System.out.print(elementName);}

Copies elements in the array in memory and prints out all copied elements.

--

import java.util.Arrays;

Arrays.sort(arrayName);

or 

Arrays.sort(arrayName, elementIndexOne, elementIndexTwo);


A method that returns a sorted array or sorts specific elements in the array


ArrayList Class in Java
************************

import java.util.ArrayList;		: Imports ArrayList class

---

ArrayList<dataType> listName = new ArrayList<>();	: Creates ArrayList of dataType

arrayListName.ArrayList()		: Creates an empty list
arrayListName.add(obj: E)		: Appends a new element obj at the end of the list
arrayListName.add(index: int, obj: E)	: Adds new element obj at specified index in list
arrayListName.clear()			: Removes all elements from the list
arrayListName.contains(obj: Object)	: Returns true if list contains element obj
arrayListName.get(index: int)		: Returns element from the list at specified index
arrayListName.isEmpty()			: Returns true if list contains no elements
arrayListName.lastIndexOf(obj: Object)	: Returns index of last matching element in list
arrayListName.remove(obj: Object)	: Removes first element from list. Returns true if element is removed.
arrayListName.size()			: Returns number of elements in list
arrayListName.remove(index: int)	: Removes element in specified index. Returns true if element is removed
arrayListName.set(index: int, obj: E)	: Sets element at specified index

---

ArrayList<dataType> listName = new ArrayList<>(Arrays.asList(arrayName));

Converts an array to an ArrayList.

---

arrayListName.toArray(arrayName);

Converts an ArrayList to an array.

---

import java.util.collections.*;

imports sort, min, max, and shuffle

---

sort(arrayName)		: Sorts an array if elements are integers, doubles or strings
min(arrayName)		: Returns min element
max(arrayName)		: Returns max element
shuffle(arrayName)	: Randomly shuffles elements in array

---






Methods (Functions) in Java
****************************

What is in a method definition?

The new method's name and the block of statements that will execute if the method is called. Parameters are defined as an input to the function. In Java, a method is a function that belongs to a class. Return variables are defined which act as the outputs of the method. A method may have either one or no return variable. It is possible to have more than one method with the same name in the same class as long as they contain different list of parameters. Names for both parameters and arguments don't have to be the same.

A returnType is the data type of the return variable. If a method has no return value, write 'void' for the returnType. 

DataTypes: can be an int, int[], int[][], char, char[], String[], double, float, objectRefVar etc..

Modifiers: Optional labels that allow certain properties or restrictions on the method.

public    : accessible to all classes

private   : only accessible within its' own class

'default' : only accessible in the same package

protected : accessible in the same package and subclasses

final     : cannot be overwritten/modified

static    : Can be accessed without creating an object of the class

abstract  : used in an abstract class and allows the body to be inherited by the subclass

transient : skipped when serializing the object containing them

synchronized   : can only be accessed by one thread at a time



modifiers returnType methodName(dataType parameterOne, dataType parameterTwo, ...)
	{
	
	//Block of statements that execute if method is called..
	
	return variableName;

	}

or



modifiers void methodName(dataType parameterOne, dataType parameterTwo, ...)
	{
	
	//Block of statements that execute if method is called..
	
	}
	


-----

//If the method defintion is in the same class as the method call.

methodName(argumentOne, argumentTwo, ...);


//If the method defintion is in a different class as the method call.

className.methodName(argumentOne, argumentTwo, ...);


//className is the name of the class that contains the method.



Calls a method and passes an argument to each parameter. can be an When the method executes, either one or no return value may be outputted. When a method is called, the arguments are copied, method executed, and local variables created in a separate location in memory which is then discarded after the methods return.

Elements in an array can be modified without return when passed into a method because the reference to the array is copied to the parameter, thus both the parameter and argument reference the array.

---

Method overloading is a way of creating multiple implementaion of the same method using the same methodName. When calling a method, the implementaion to be called will be the one where signature matches exactly (methodName, dataType, number of arguments).


modifiers dataTypeOne methodName(dataTypeOne parameterOne, dataTypeOne parameterTwo, ...)
	{
	
	//Block of statements that execute if method is called..
	
	return variableName;

	}


modifiers dataTypeTwo methodName(dataTypeTwo parameterOne, dataTypeTwo parameterTwo, ...)
	{
	
	//Block of statements that execute if method is called..
	
	return variableName;

	}

---

What is a library?

A set of methods written to carry out tasks for similar problems which can be used to increase prodoctivity. 

--

What is an API?

a set of tools that allow software to communicate with each other.

--


Classes and objects in Java
****************************

What is a class?

A template with properties and methods that can be used to create an object.

--

What is defined in a class?

Properties that store data, methods that operate on the constructors, and an interface that serves as input/output for an object.


modifier class className
	{


	// Properties

		Private dataType variableNameOne;
		
		Private dataType variableNameTwo;
	
		Private dataType variableNameThree;

	// Constructor is called when the 'new' operator is invoked and builds the object

		className()
			{
				// code to initialize (build) object. 
				// Used to set values to variables in properties.
			}

			
		className(dataTypeOne parameterOne, dataTypeTwo parameterTwo, ...)
			{
				// code to initialize (build) object. 
				// Used to set values to variables in properties.
			}

	// Methods with parameters as arguments

		public dataTypeOne methodOne(dataTypeOne parameterOne, dataTypeTwo parameterTwo, ...)
			{
				// code to execute
				
				return variableName;
			}

		public dataTypeTwo methodTwo(dataTypeOne parameterOne, ...)
			{
				// code to execute

				return variableName;
			}

		public void methodThree()
			{
				// code to execute
			}

	}



---

How is an object instantiated, (created)?

className objectRefVar = new className();

The 'new' operator invokes the constructor

The objectRefVar contains the reference to the object

---

Static methods in a class can be used without creating an object

---

Private variables in a class cannot be modified by public methods outside of the variable's class

---

A single file can contain multiple classes, but only one can have a public modifier.

---

If a class has no constructor, then a no argument constructor is built.

--

className objectRefVar;

Creates an object reference variable that can point to a className object.

--

objectRefVar.variableName

refers to the variableName from the object.

--

objectRefVar.method();

Executes a method from the object. Arguments can be passed through the method.

--

'null' is a reference type in Java that does not point to anything.
'null' is a reserved word in Java.

--

this.variableName;

Refers to the non-static variable in the object.

--

this.varName

refers to the variable in the class and not the variable in a parameter for a method.




Superclasses and Subclasses
****************************

Superclass == Parent Class == Base Class
Subclass   == Child Class  == Derived Class

---

public class subClassName extends superClassName
	{

	@override
	public dataTypeTwo methodTwo(dataTypeOne parameterOne, ...)
			{
				// code to execute

				return variableName;
			}

	}

Creates a subclass from a superclass and can either overload or override methods in the superclass by having the same signature or having the same method name but different return-type or parameters respectively.

Using @Override will generate an error if the method in subclass did not override the method in the superclass because of a misspelled method name.

---

A Subclass,


inherits,			does not inherit

public methods			private methods?
				Constructors
				Private data field



---

Constructors from superclasses can be inherited by subclasses using 

super()						: no-arg superClass constructor
super(dataType1 par1, dataType2 par2, ...) 	: Inside subClass constructor
super(par1, par2, ...)				: Inside subClass but not in constructor

either of these must be the first statment in the subclass

---

Methods from superclasses can be invoked in a subclass using

super.methodName()
super.methodName(dataType1 par1, dataType2 par2, ...)

---

All classes in Java are extensions of the class named 'Object'.

Thus, when no inheritance of the class is defined, the class inherits the Object superclass by default.	

objectName.toString()		: Object method returns objectName@memoryLocationInHex

---

If the inheritance chain goes from most specialized to most general objects (obj1, obj2, obj3, ..., obj n) then when a method is invoked, the Java Virtual Machine will look fro the method starting from most specialized (obj1) to most general (obj n).

---

A method can accept an object (a supertype) as a parameter as well as other objects which are subtypes.

---

A class declared with 'final' modifier will not be extended. The Math class is final.
A method declared with 'final' modifier be non-overridable.

---

Modifiers allow methods or data in a class to be accessed from,


Same Class in	  Same Package	   Subclass in 		   Different Package
Same Package			   Different Package

public		  public	   public		   public		
protected	  protected	   protected
default		  default
private

---

What is an abstract class?

A super class that is too general to instantiate and only serves to be inherited by subclasses. Abstract classes cannot be instatiated without also implementing the abstract methods.


WHat is an abstract method?

A method that must be overridden/instantiated in the subclass. An abstract method only contains the header without a code block (Curly braces). Include semi-colon.

abstract modifier returnType methodName(dataType1 par1, ...);



Scanners in Java
*****************

import java.util.Scanner;

imports the Scanner class

--

Scanner scannerName = new Scanner(System.in);

Creates a new scanner object that uses keyboard as input

--

List of methods that can be used for scanner objects:

scannerName.nextByte()   : Reads a byte-sized integer

scannerName.nextShort()  : Reads a short integer (16 bit)

scannerName.nextInt()    : Reads a full-sized integer (32 bit)

scannerName.nextLong()   : Reads a long integer (64 bit)

scannerName.nextFloat()  : Reads a Float-type number

scannerName.nextDouble   : Reads a double-type number

scannerName.next()       : Reads a string that ends before a spacebar character

scannerName.nextLine()   : Reads the rest of the current line, then jumps to the next line

scannerName.next().charAt(index) : Reads the char at the index of the next string

scannerName.close()      : closes a scanner object that will no longer be used in memory. Also closes 'System.in' so 'System.in' can no longer be used in the program.


Strings in Java
****************

String stringName = "stringContent";

Creates a string and assigns the content in the string.

--

String stringName = new String();

Creates an empty string.

--

List of methods that can be used for string objects:

stringName.length()        : Returns the length of the string using values 1 - infinity

stringName.charAt(index)   : Returns a character in the index of the argument

stringName.concat(anotherString) : Returns stringName concatinated with anotherString

stringName.toUpperCase()   : Returns stringName in all upper-case letters

stringName.toLowerCase()   : Returns stringName in all lower-case letters

stringName.trim()          : Returns stringName with spacebar characters trimmed on both sides

stringName.substring(beginIndexInclusive, endIndexExclusive) : Returns substring

stringName.equals(anotherString) : Returns true if stringName equals anotherString, case-sensitive

stringName.equalsIgnoreCase(anotherString) : Returns true if stringName equals anotherString, case-insensitive

stringName.compareTo(anotherString) : Returns an integer greater than, less than, or equal to zero to indicate if stringName is greater than, less than, or equal to anotherString

stringName.compareToIgnoreCase(anotherString) : Returns an integer greater than, less than, or equal to zero to indicate if stringName is greater than, less than, or equal to anotherString, case-insensitive

stringName.startsWith(prefix) : Returns true if stringName starts with the prefix

stringName.endsWith(suffix)   : Returns true if stringName ends with the suffix

stringName.contains(subString) : Returns true if subString is in stringName

stringName.valueOf(int)        : Returns a string converted from an integer, float, double, long, char, or boolean

stringName.replace(oldChar, newChar) : Returns a new string with all old chars replaced with new chars

stringName.replaceFirst(oldString, newString) : Returns a new string with the first matching substring replaced

stringName.replaceAll(oldString, newString) : Returns a new string with all matching substrings replaced

stringName.split('delimiter')  : Returns an array of strings where each were separated by a deliminator in the original string

stringName = stringNameOne + stringNameTwo + ..;    : Concatinates multiple strings 


Type Conversion in Java
************************
aka type-casting


Types are organized in a hierarchy from biggest to smallest as shown: 

(Biggest) double, float, long, int, short, byte (Smallest)

---

largerType largerTypeName = smallerTypeName;

Assigns a smaller type to a larger type, no information is lost in the process.

---

smallerType smallerTypeName = (smallerType) largerTypeName;

Converts a larger type to a smaller type, information may be lost this is 


Loops in Java
**************

While(Boolean)
{
	//Execute Code
}

--

do{
	//Execute Code
}

while(Boolean);


Math Functions in Java
***********************

import java.lang.Math;

Imports the Math class of java

--

Math.sqrt(double1);

Returns square root

--

Math.sin(radians);

works for sin, cos, tan, asin, acos, and atan trig functions

--

Math.toRadians(degree);

Converts degrees to radians

--

Math.toDegree(radians);

converts radians to degrees

--

Math.log(double);

Log base e (natural log)

--

Math.log10(double);

Log base 10

--

Math.exp(double);

e to the power of double

--

Math.factorial(int);

--

Math.pow(double1, double2);

Returns left number to the power of the right number

--

Math.random();

Returns a random double between 0 and 1


File Handling in Java
**********************

The File class is used for finding file name and directory path.

The PrintWriter class can write to a file.

---

File fileObjectName = new File("FileName.txt");

Creates File object.

--

PrintWriter printWriterObjectName = new PrintWriter(fileObjectName);

Creates PrintWriter object.

--

import java.io.File;
import java.io.PrintWriter;

--



try (PrintWriter printWriterObjectName = new PrintWriter(fileObjectName);)
{
	printWriterObjectName.print(variableName);
	//More code here...
}
// Closes printWriter after try block


Can also be done with Scanner.
--

printWriterObjectName.close();

--

Scanner input = new Scanner(new file("fileName.txt"));

or

Scanner input = new Scanner(fileObjectName);

Reads from file.

---

fileName.File(pathname: String)
fileName.File(parent: String, child: String)
fileName.File(parent: File, child: String)
fileName.exists()		: Returns true if file object exists
fileName.canRead()		: Returns true if file exists and can be read
fileName.canWrite()		: Returns true if file exists and can be written
fileName.isDirectory()		: Returns true if object is a dir
fileName.isFile()		: Returns true if object is a file
fileName.isAbsolute()		: Returns true if file created using absolute path
fileName.isHidden()		: Returns true if file is hidden
fileName.getAbsolutePath()	: Returns absolute path of file, String
fileName.getCanonicalPath()	: Returns absolute path with resolved symbolic links, String
fileName.getName()		: Returns name as String
fileName.getPath()		: Returns path as String
fileName.getParent()		: Returns parent dir as String
fileName.lastModified()		: Returns Last date when modified, long
fileName.length()		: Returns size in bytes or zero if file doesn't exist or is a dir, long
fileName.listFiles()		: Returns files in dir for a dir file object, File[]
fileName.delete()		: Deletes file and returns true if successful, boolean
fileName.renameTo(destFile)	: Renames file to destFile, returns true if successful
fileName.mkdir()		: Creates dir for file object, returns true if successful
fileName.mkdirs()		: Creates dir and paraent dir, returns true if successful



Exception Handling in Java
***************************

try
{
	//Executes code here...
}
catch(exceptionName)
{
	//Executes code if errorType occured...
}
catch(exceptionNameOne | exceptionNameTwo | exceptionNameThree)
{
	//Executes code if any of the three errorTypes occured...
}
finally
{
	//Executes regardless of exception occurs or not and before return...
}

If an certain error occures in the try block, the code in the catch block will execute. You can make multiple catch statements. As soon as an exception occurs, the rest of the code in the try block is skipped.

---

throw exceptionName("Error Message");

Throws an error.

---

modifiers returnType methodName(dataType parameterOne,  ...) throws exceptionOne, exceptionThree, ...

Signature for a method that can throw exceptions to its' caller if they occur.


